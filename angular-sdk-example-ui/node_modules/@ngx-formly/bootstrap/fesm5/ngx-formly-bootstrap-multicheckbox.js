import { __extends, __spread, __assign, __decorate } from 'tslib';
import { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { FieldType, FormlyModule } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';

var FormlyFieldMultiCheckbox = /** @class */ (function (_super) {
    __extends(FormlyFieldMultiCheckbox, _super);
    function FormlyFieldMultiCheckbox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                formCheck: 'custom',
            },
        };
        return _this;
    }
    FormlyFieldMultiCheckbox.prototype.onChange = function (value, checked) {
        var _a;
        if (this.to.type === 'array') {
            this.formControl.patchValue(checked
                ? __spread((this.formControl.value || []), [value]) : __spread((this.formControl.value || [])).filter(function (o) { return o !== value; }));
        }
        else {
            this.formControl.patchValue(__assign(__assign({}, this.formControl.value), (_a = {}, _a[value] = checked, _a)));
        }
        this.formControl.markAsTouched();
    };
    FormlyFieldMultiCheckbox.prototype.isChecked = function (option) {
        var value = this.formControl.value;
        return value && (this.to.type === 'array' ? value.indexOf(option.value) !== -1 : value[option.value]);
    };
    FormlyFieldMultiCheckbox = __decorate([
        Component({
            selector: 'formly-field-multicheckbox',
            template: "\n    <div>\n      <div\n        *ngFor=\"let option of to.options | formlySelectOptions: field | async; let i = index\"\n        [ngClass]=\"{\n          'form-check': to.formCheck.indexOf('custom') === -1,\n          'form-check-inline': to.formCheck === 'inline',\n          'custom-control': to.formCheck.indexOf('custom') === 0,\n          'custom-checkbox': to.formCheck === 'custom' || to.formCheck === 'custom-inline',\n          'custom-control-inline': to.formCheck === 'custom-inline',\n          'custom-switch': to.formCheck === 'custom-switch'\n        }\"\n      >\n        <input\n          type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-input]=\"to.formCheck.indexOf('custom') === 0\"\n          [value]=\"option.value\"\n          [checked]=\"isChecked(option)\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\"\n        />\n        <label\n          [class.form-check-label]=\"to.formCheck.indexOf('custom') === -1\"\n          [class.custom-control-label]=\"to.formCheck.indexOf('custom') === 0\"\n          [for]=\"id + '_' + i\"\n        >\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], FormlyFieldMultiCheckbox);
    return FormlyFieldMultiCheckbox;
}(FieldType));

var FormlyBootstrapMultiCheckboxModule = /** @class */ (function () {
    function FormlyBootstrapMultiCheckboxModule() {
    }
    FormlyBootstrapMultiCheckboxModule = __decorate([
        NgModule({
            declarations: [FormlyFieldMultiCheckbox],
            imports: [
                CommonModule,
                ReactiveFormsModule,
                FormlyBootstrapFormFieldModule,
                FormlySelectModule,
                FormlyModule.forChild({
                    types: [
                        {
                            name: 'multicheckbox',
                            component: FormlyFieldMultiCheckbox,
                            wrappers: ['form-field'],
                        },
                    ],
                }),
            ],
        })
    ], FormlyBootstrapMultiCheckboxModule);
    return FormlyBootstrapMultiCheckboxModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { FormlyBootstrapMultiCheckboxModule, FormlyFieldMultiCheckbox };
//# sourceMappingURL=ngx-formly-bootstrap-multicheckbox.js.map
