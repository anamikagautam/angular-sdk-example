import { __extends, __decorate, __metadata } from 'tslib';
import { NgZone, ViewChild, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SelectControlValueAccessor, ReactiveFormsModule } from '@angular/forms';
import { FieldType, FormlyModule } from '@ngx-formly/core';
import { FormlySelectModule } from '@ngx-formly/core/select';
import { FormlyBootstrapFormFieldModule } from '@ngx-formly/bootstrap/form-field';
import { take } from 'rxjs/operators';

var FormlyFieldSelect = /** @class */ (function (_super) {
    __extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect(ngZone) {
        var _this = _super.call(this) || this;
        _this.ngZone = ngZone;
        _this.defaultOptions = {
            templateOptions: {
                options: [],
                compareWith: function (o1, o2) {
                    return o1 === o2;
                },
            },
        };
        return _this;
    }
    Object.defineProperty(FormlyFieldSelect.prototype, "selectAccessor", {
        // workaround for https://github.com/angular/angular/issues/10010
        set: function (s) {
            var _this = this;
            if (!s) {
                return;
            }
            var writeValue = s.writeValue.bind(s);
            if (s._getOptionId(s.value) === null) {
                writeValue(s.value);
            }
            s.writeValue = function (value) {
                var id = s._idCounter;
                writeValue(value);
                if (value === null) {
                    _this.ngZone.onStable
                        .asObservable()
                        .pipe(take(1))
                        .subscribe(function () {
                        if (id !== s._idCounter &&
                            s._getOptionId(value) === null &&
                            s._elementRef.nativeElement.selectedIndex !== -1) {
                            writeValue(value);
                        }
                    });
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    FormlyFieldSelect.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    __decorate([
        ViewChild(SelectControlValueAccessor),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], FormlyFieldSelect.prototype, "selectAccessor", null);
    FormlyFieldSelect = __decorate([
        Component({
            selector: 'formly-field-select',
            template: "\n    <select\n      *ngIf=\"to.multiple; else singleSelect\"\n      class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [compareWith]=\"to.compareWith\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\"\n    >\n      <ng-container *ngIf=\"to.options | formlySelectOptions: field | async as opts\">\n        <ng-container *ngIf=\"to._flatOptions; else grouplist\">\n          <ng-container *ngFor=\"let opt of opts\">\n            <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n          </ng-container>\n        </ng-container>\n\n        <ng-template #grouplist>\n          <ng-container *ngFor=\"let opt of opts\">\n            <option *ngIf=\"!opt.group; else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{\n              opt.label\n            }}</option>\n            <ng-template #optgroup>\n              <optgroup [label]=\"opt.label\">\n                <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                  {{ child.label }}\n                </option>\n              </optgroup>\n            </ng-template>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select\n        class=\"form-control\"\n        [formControl]=\"formControl\"\n        [compareWith]=\"to.compareWith\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\"\n      >\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"undefined\">{{ to.placeholder }}</option>\n        <ng-container *ngIf=\"to.options | formlySelectOptions: field | async as opts\">\n          <ng-container *ngIf=\"to._flatOptions; else grouplist\">\n            <ng-container *ngFor=\"let opt of opts\">\n              <option [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{ opt.label }}</option>\n            </ng-container>\n          </ng-container>\n\n          <ng-template #grouplist>\n            <ng-container *ngFor=\"let opt of opts\">\n              <option *ngIf=\"!opt.group; else optgroup\" [ngValue]=\"opt.value\" [disabled]=\"opt.disabled\">{{\n                opt.label\n              }}</option>\n              <ng-template #optgroup>\n                <optgroup [label]=\"opt.label\">\n                  <option *ngFor=\"let child of opt.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n                    {{ child.label }}\n                  </option>\n                </optgroup>\n              </ng-template>\n            </ng-container>\n          </ng-template>\n        </ng-container>\n      </select>\n    </ng-template>\n  ",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        __metadata("design:paramtypes", [NgZone])
    ], FormlyFieldSelect);
    return FormlyFieldSelect;
}(FieldType));

var FormlyBootstrapSelectModule = /** @class */ (function () {
    function FormlyBootstrapSelectModule() {
    }
    FormlyBootstrapSelectModule = __decorate([
        NgModule({
            declarations: [FormlyFieldSelect],
            imports: [
                CommonModule,
                ReactiveFormsModule,
                FormlyBootstrapFormFieldModule,
                FormlySelectModule,
                FormlyModule.forChild({
                    types: [
                        {
                            name: 'select',
                            component: FormlyFieldSelect,
                            wrappers: ['form-field'],
                        },
                        { name: 'enum', extends: 'select' },
                    ],
                }),
            ],
        })
    ], FormlyBootstrapSelectModule);
    return FormlyBootstrapSelectModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { FormlyBootstrapSelectModule, FormlyFieldSelect };
//# sourceMappingURL=ngx-formly-bootstrap-select.js.map
