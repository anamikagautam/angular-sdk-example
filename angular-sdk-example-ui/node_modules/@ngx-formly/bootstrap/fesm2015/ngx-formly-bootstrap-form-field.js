import { __decorate } from 'tslib';
import { Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FieldWrapper, FormlyModule } from '@ngx-formly/core';
import { ReactiveFormsModule } from '@angular/forms';

let FormlyWrapperFormField = class FormlyWrapperFormField extends FieldWrapper {
};
FormlyWrapperFormField = __decorate([
    Component({
        selector: 'formly-wrapper-form-field',
        template: `
    <div class="form-group" [class.has-error]="showError">
      <label *ngIf="to.label && to.hideLabel !== true" [attr.for]="id">
        {{ to.label }}
        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>
      </label>

      <ng-template #fieldComponent></ng-template>

      <div *ngIf="showError" class="invalid-feedback" [style.display]="'block'">
        <formly-validation-message [field]="field"></formly-validation-message>
      </div>

      <small *ngIf="to.description" class="form-text text-muted">{{ to.description }}</small>
    </div>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], FormlyWrapperFormField);

let FormlyBootstrapFormFieldModule = class FormlyBootstrapFormFieldModule {
};
FormlyBootstrapFormFieldModule = __decorate([
    NgModule({
        declarations: [FormlyWrapperFormField],
        imports: [
            CommonModule,
            ReactiveFormsModule,
            FormlyModule.forChild({
                wrappers: [
                    {
                        name: 'form-field',
                        component: FormlyWrapperFormField,
                    },
                ],
            }),
        ],
    })
], FormlyBootstrapFormFieldModule);

/**
 * Generated bundle index. Do not edit.
 */

export { FormlyBootstrapFormFieldModule, FormlyWrapperFormField as Éµa };
//# sourceMappingURL=ngx-formly-bootstrap-form-field.js.map
